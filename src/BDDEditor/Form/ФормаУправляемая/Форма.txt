
&НаКлиенте
Процедура ПутьКХранилищуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//TODO 
	//Здесь будет выбор места хранения структуры
КонецПроцедуры

&НаКлиенте
Процедура СтруктураДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.СтруктураДляЗагрузки = ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь); 
КонецФункции 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	ДополнительныеПараметры.Вставить("ИмяОбработки",ИмяОбработки);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла) Экспорт
	ДополнительныеПараметры = Новый Структура;
	Если ЕстьПоддержкаНемодальныхФорм Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбработкаПослеПомещенияФайла"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("НачатьПомещениеФайла(Оповещение,, ИмяФайла, Ложь, УникальныйИдентификатор);");
		
		Возврат ДополнительныеПараметры.ИмяОбработки;
	Иначе
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ИмяФайла, , Ложь, УникальныйИдентификатор);
		//ПодключитьВнешнююОбработку(АдресХранилища);
		Результат = Неопределено;
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
		Возврат ИмяОбработки;
		
		//ОбработкаПолученияФайлаОбработкиТеста(Результат,АдресХранилища,ИмяФайла,ДополнительныеПараметры);
	КонецЕсли;
КонецФункции 

&НаСервере
Процедура СкопироватьДеревоФич(ДеревоТестов)//ДеревоТестов
	//ДеревоЭлементов=ДеревоТестов.ПолучитьЭлементы();
	//КОНВЕРТНУТЬДЕРЕВОТЕСТОВ;
	//Дерево = РеквизитФормыВЗначение("ДеревоРедактора");
	//Дерево = ДеревоТестов;
	//ЗначениеВРеквизитФормы(Дерево,"ДеревоРедактора");
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьДерево(Команда) Экспорт
	ИмяОбработки = ПодключитьВнешнююОбработкуКлиент(Объект.ПутьКVanessaBehavior);
	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.УправляемаяФорма",,,Истина);
	ФормаОбработки.Открыть();
	ФормаОбработки.Объект.КаталогИнструментов="C:\rep\vanessa-behavoir";
	ФормаОбработки.Объект.КаталогФич = Объект.СтруктураДляЗагрузки;
	ФормаОбработки.ЗагрузитьФичи();
//	СкопироватьДеревоФич(ФормаОбработки.Объект);
	
	ФормаОбработки.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	//TODO
	//Здесь будет сохранение изменений в хранилище
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	//TODO
	//Здесь будет заполнение по шаблону в зависимости от текущей строки.
	//Подумать, может сделать выбор шаблона
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРедактораПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//TODO
	//Здесь будет редактирование, в зависимости от установленного параметра.
	//Когда редактировать в тексте = истина, тогда открывается отдельное окно для редактирования
	//Когда редактировать в тексте = ложь, тогда редактирование производится в строке  
	//Подумать, а может не надо?
	//Редактировать в отдельном окне, потом при окончании редактирования разбивать на структуру дерева
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641",".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаСервере
Функция УзнатьЕстьПоддержкаАсинхронныхВызовов()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.5.1383",".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	
	Рез = Версия1БольшеИлиРавно И Вычислить("Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент <> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция УзнатьЕстьПоддержкаНемодальныхФормКлиент() Экспорт
	Возврат УзнатьЕстьПоддержкаНемодальныхФорм();
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	ЕстьПоддержкаНемодальныхФорм    = УзнатьЕстьПоддержкаНемодальныхФорм();
	ЕстьПоддержкаАсинхронныхВызовов = УзнатьЕстьПоддержкаАсинхронныхВызовов();
//	ИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКVanessaBehaviorНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к обработке Vanessa Behavior ";
	ДиалогОткрытияФайла.Фильтр = "Файл (*.epf)|*.epf";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайла"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.ПутьКVanessaBehavior = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBDDEditor");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("ПутьКVanessaBehavior", Объект.ПутьКVanessaBehavior);
		Настройки.Свойство("ПутьПоУмолчанию",Объект.ПутьПоУмолчанию);
		
		Настройки.Свойство("РедактироватьВТексте", Объект.РедактироватьВТексте);
		Настройки.Свойство("СтруктураДляЗагрузки", Объект.СтруктураДляЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПутьКVanessaBehavior", Объект.ПутьКVanessaBehavior);
	Настройки.Вставить("ПутьПоУмолчанию",Объект.ПутьПоУмолчанию);
	
	Настройки.Вставить("РедактироватьВТексте", Объект.РедактироватьВТексте);
	Настройки.Вставить("СтруктураДляЗагрузки", Объект.СтруктураДляЗагрузки);
	
	ХранилищеОбщихНастроек.Сохранить("VanessaBDDEditor",, Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
	ВосстановитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	//Вставить содержимое обработчика
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Функция УбратьЗапрещенныеСимволы(ИмяФайла) Экспорт
	ИмяФайла = СтрЗаменить(ИмяФайла,".","");
	ИмяФайла = СтрЗаменить(ИмяФайла,",","");
	ИмяФайла = СтрЗаменить(ИмяФайла,":","");
	ИмяФайла = СтрЗаменить(ИмяФайла,";","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"-","_");
	ИмяФайла = СтрЗаменить(ИмяФайла,"+","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"/","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"\","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"=","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"!","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"@","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"#","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"$","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"%","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"^","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"&","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"*","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"(","");
	ИмяФайла = СтрЗаменить(ИмяФайла,")","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"№","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"?","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"`","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"'","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"~","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"<","");
	ИмяФайла = СтрЗаменить(ИмяФайла,">","");
	Возврат ИмяФайла;
КонецФункции

&НаКлиенте
Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции

&НаКлиенте
Функция СформироватьИмяФайла(ИмяФайла) Экспорт
	ИмяФайла=УбратьЗапрещенныеСимволы(ИмяФайла);
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ИмяФайла," ",Истина);
	НовоеИмяФайла="";
	Для Каждого Элем Из МассивПодстрок Цикл
		НовоеИмяФайла = НовоеИмяФайла + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	Возврат НовоеИмяФайла;
КонецФункции	

&НаКлиенте
Процедура СоздатьФичаФайлыНаСервере()
	// Вставить содержимое обработчика.
	
	
КонецПроцедуры

&НаКлиенте
Функция ПоискФайлаПоИмени(ИмяФайла) Экспорт
	Вернуть=Новый Структура;
	НайденныеФайлы=НайтиФайлы(Объект.СтруктураДляЗагрузки,ИмяФайла,Истина);
	Для Каждого Файлик из НайденныеФайлы Цикл
		Если Файлик.ПолноеИмя<>Неопределено Тогда
			Вернуть.Вставить("Путь",Файлик.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;	
	Возврат Вернуть;
КонецФункции	

&НаКлиенте
Процедура СоздатьФичаФайлы(Команда)
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Объект.СтруктураДляЗагрузки) Тогда
		Сообщить("Не заполнен путь к структуре!");
		Возврат;
	КонецЕсли;	
	
	Для Стр=0 По ТЗСбораТребований.Количество()-1 Цикл
		ТекСтрока=ТЗСбораТребований.Получить(Стр);
		ПутьКФайлу = Объект.СтруктураДляЗагрузки;
		ИмяФайла = СокрЛП(ТекСтрока.Функционал);
		НовоеИмяФайла="";
		НовоеИмяФайла = СформироватьИмяФайла(ИмяФайла);
		НовоеИмяФайла=НовоеИмяФайла+".feature";
		НайденныеФайлы=Новый Структура;
		НайденныеФайлы=ПоискФайлаПоИмени(НовоеИмяФайла);
		
		Если НайденныеФайлы.Количество()=0 Тогда
			Промежуток=?(Прав(ПутьКФайлу,1)="\","Temp\","\Temp\");
			ПолныйПуть=""+СокрЛП(ПутьКФайлу)+Промежуток+СокрЛП(НовоеИмяФайла);
			
			АдресФайлаВоВременномХранилище = "";
			
			Шаблон=ПолучитьШаблонФичаФайла("ШаблонФичи",Стр, АдресФайлаВоВременномХранилище);
			
			Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
				ПолучитьФайл(АдресФайлаВоВременномХранилище, ПолныйПуть,Ложь);
			КонецЕсли;
			ТекСтрока.ФичаФайл=ПолныйПуть;
		ИначеЕсли НайденныеФайлы.Количество()=1 Тогда
			ПолныйПуть=НайденныеФайлы["Путь"];
			ТекСтрока.ФичаФайл=ПолныйПуть;
		Иначе 
			ТекСтрока.ЕстьФичи=Истина;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьШаблонФичаФайла(ИмяМакета,ИндСтроки,АдресФайлаВоВременномХранилище)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".feature");
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ТЗСбора = РеквизитФормыВЗначение("ТЗСбораТребований");
	Строка=ТЗСбора.Получить(ИндСтроки);
	ТД = Новый ТекстовыйДокумент;
	Шаблон=ОбъектОбработки.ПолучитьМакет(ИмяМакета);
	ОбластьШапка=Шаблон.ПолучитьОбласть("Шапка");
	ОбластьПостоянная=Шаблон.ПолучитьОбласть("Постоянная");
	ОбластьПеременная=Шаблон.ПолучитьОбласть("Переменная");
	ОбластьПостоянная.Параметры.Функционал = СокрЛП(Строка.Функционал);
	ОбластьПостоянная.Параметры.Роль = СокрЛП(Строка.Роль);
	ТД.Вывести(ОбластьШапка);
	ТД.Вывести(ОбластьПостоянная);
	КоличествоСценариев=?(Строка.КоличествоСценариев=0,1,Строка.КоличествоСценариев);
	Для кк=1 по КоличествоСценариев Цикл
		ТД.Вывести(ОбластьПеременная);
	КонецЦикла;
	ТД.Записать(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;

КонецФункции	

&НаКлиенте
Процедура ТЗСбораТребованийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Поле.Имя="ТЗСбораТребованийФичаФайл" Тогда
		СтандартнаяОбработка=Ложь;
		ФормаОбработки = ПолучитьФорму("ВнешняяОбработка.BDDEditor.Форма.ФормаРедактора",,ЭтотОбъект,Истина);
		ФормаОбработки.ПутьКФиче=Элемент.ТекущиеДанные.ФичаФайл;
		ФормаОбработки.Открыть();
	//	ОткрытьФорму(Объект.ИмяОбработки + ".Форма.ФормаРедактора");
	КонецЕсли;	
КонецПроцедуры

	