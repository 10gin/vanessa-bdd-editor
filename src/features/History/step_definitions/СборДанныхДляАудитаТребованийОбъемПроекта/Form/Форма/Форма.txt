//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЗаполнилосьСтруктуройFeature_файловСОбъемнымиПоказателями(Парам01)","ВТЧЗаполнилосьСтруктуройFeature_файловСОбъемнымиПоказателями","Тогда В ТЧ ""ОбъемПроекта"" заполнилось структурой feature-файлов с объемными показателями");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

#Область СвоиФункции
&НаКлиенте
Функция НайтиФормыТекущегоОкна() Экспорт
	ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение();
	МассивФорм             = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Процедура ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	//ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
	//ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкна();
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени Тогда
			ПолеРеквизит = ТекущаяФорма.НайтиОбъект(Тип("ТестируемоеПолеФормы"),, ИмяРеквизита);
		Иначе
			ПолеРеквизит = ТекущаяФорма.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ИмяРеквизита);
		КонецЕсли;	 
		
		
		Если ПолеРеквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПолеРеквизит.Активизировать();
		ПолеРеквизит.УстановитьОтметку();
		
		
		Нашли = Истина;
		Прервать;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			Стр = "Флаг с именем <" + ИмяРеквизита + "> не найден!";
		Иначе	
			Стр = "Флаг с заголовоком <" + ИмяРеквизита + "> не найден!";
		КонецЕсли;	 
		
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 

	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение()
	Возврат КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
КонецФункции	

&НаКлиенте
Функция НайтиТекущуюФорму() Экспорт
	
	Возврат Контекст.АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
КонецФункции	

&НаКлиенте
Функция НайтиРеквизитФормы(ИмяРеквизита) Экспорт
	ТекущаяФорма=НайтиТекущуюФорму();
	Возврат ТекущаяФорма.НайтиОбъект(Тип("ТестируемоеПолеФормы"),, ИмяРеквизита);
	
КонецФункции	

&НаКлиенте
Функция НайтиТЧФормы(ИмяТЧ) Экспорт
	ТекущаяФорма=НайтиТекущуюФорму();
	Возврат ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,ИмяТЧ);
	
КонецФункции	

#КонецОбласти


//окончание текста модуля

&НаКлиенте
//Тогда В ТЧ "ОбъемПроекта" заполнилось структурой feature-файлов с объемными показателями
//@ВТЧЗаполнилосьСтруктуройFeature_файловСОбъемнымиПоказателями(Парам01)
Процедура ВТЧЗаполнилосьСтруктуройFeature_файловСОбъемнымиПоказателями(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ТЧ=НайтиТЧФормы("ОбъемПроекта");
	ТЧ.ПерейтиКПервойСтроке(); 
	ТЧ.Активизировать(); 
	Если ТЧ.ВозможноРазвернуть() Тогда
		ТЧ.Развернуть();
	КонецЕсли;
	ТЧ.ВыделитьВсеСтроки();
	ЗначениеТЧ = ТЧ.ПолучитьВыделенныеСтроки();
	Ванесса.ПроверитьНЕРавенство(ЗначениеТЧ.Количество(),0,"Объем проекта не заполнился");
	
КонецПроцедуры
